#!/usr/bin/env bash
### setzer-poke -- Poke an on-chain oracle with latest prices
### Usage: setzer poke <address>
set -e
[ $# -gt 0 ] || setzer --bad-usage "$0"
oracle=$(seth --to-address "$1")
pair=$(seth call "$oracle" 'wat()')
pair=$(setzer --to-ascii "$pair")
pair=$(setzer --pair "$pair")

msgs=$(setzer latest "$pair" | jq -s '.|sort_by(.price)')
size=$(echo "$msgs" | jq '.|length')

if [[ $size -lt "$SETZER_QUORUM" ]]
then
  echo >&2 "Error: insufficient price data ($size of $SETZER_QUORUM)"
  exit 1
fi

age=$(seth --to-dec "$(seth call "$oracle" 'age()')")

era()
{
  if [[ $age -gt "$(seth --to-dec "$1")" ]]
  then
    echo >&2 "Error: oracle already poked: $(printf '%(%Y-%m-%d %H:%M:%S)T\n' "$age")"
    exit 1
  fi
  echo "$1"
}

while read -r sig val timestamp; do
  vals+=("$val")
  eras+=("$(era "$timestamp")")
  v__s+=("$(seth --to-word "0x${sig:130:2}")")
  r__s+=("${sig:2:64}")
  s__s+=("${sig:66:64}")
done <<<"$(echo "$msgs" | jq -r '.[] | [.content.sig, .content.data.price, .content.data.timestamp] | @tsv')"

IFS=","
f="poke(uint256[] memory,uint256[] memory,uint8[] memory,bytes32[] memory,bytes32[] memory)"
ETH_GAS=${ETH_GAS:-500000} seth send "$oracle" "$f" \
  "[${vals[*]}]" "[${eras[*]}]" "[${v__s[*]}]" "[${r__s[*]}]" "[${s__s[*]}]"
